package Vistas;

import conexion.ConexionBD;
import static java.lang.Integer.parseInt;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.text.ParseException;
import javax.swing.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Erick
 */
public class AgendarCita extends javax.swing.JFrame {
    
    
    /*private JComboBox<String> cmbEspecialidad;
    private JComboBox<String> cmbMedico;
    private JDateChooser dateChooser;
    private JTextField txtMotivoConsulta;
    private JComboBox<String> cmbEstadoCita;
    
    /**
     * Creates new form AgendarCita
     */
    private static final Logger logger = Logger.getLogger(DiagnosticoTratamiento.class.getName());
    
    public AgendarCita() {
        initComponents();
        cargarEspecialidadesDisponibles(); 
        dateChooser.setMinSelectableDate(new Date());
        ((JTextField) dateChooser.getDateEditor().getUiComponent()).setEditable(false);
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        txtCedulaPaciente = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbEspecialidad = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jButton_BuscarHorarios = new javax.swing.JButton();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaHorarios = new javax.swing.JTable();
        jButton_AgendarCita = new javax.swing.JButton();
        cmbMedico = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtNombrePaciente = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agendamiento de citas Medicas");

        jLabel1.setText("Cédula del Paciente:");

        jLabel2.setText("Especialidad Médica:");

        cmbEspecialidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Especialidad", "Cardiología", "Dermatología", "Pediatría", "General" }));
        cmbEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEspecialidadActionPerformed(evt);
            }
        });

        jLabel3.setText("Médico:");

        jButton_BuscarHorarios.setText("Buscar Horarios");
        jButton_BuscarHorarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_BuscarHorariosActionPerformed(evt);
            }
        });

        jLabel4.setText("Fecha:");

        tablaHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Hora", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaHorarios.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaHorarios);

        jButton_AgendarCita.setText("Agendar Cita");
        jButton_AgendarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AgendarCitaActionPerformed(evt);
            }
        });

        cmbMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMedicoActionPerformed(evt);
            }
        });

        jLabel5.setText("Nombre del Paciente:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton_BuscarHorarios)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtCedulaPaciente)
                                    .addComponent(cmbEspecialidad, 0, 212, Short.MAX_VALUE)
                                    .addComponent(cmbMedico, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtNombrePaciente))))
                        .addGap(37, 37, 37))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(jButton_AgendarCita)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_BuscarHorarios)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_AgendarCita)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_BuscarHorariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_BuscarHorariosActionPerformed
        buscarHorarios();
        String cedula = txtCedulaPaciente.getText().trim();
        
        if (validarCedula(cedula)) {
        JOptionPane.showMessageDialog(this, "Cédula válida.");
        } else {
            JOptionPane.showMessageDialog(this, "Cédula inválida. Debe tener 10 dígitos numéricos y ser ecuatoriana.","CEDULA INVALIDA" ,JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton_BuscarHorariosActionPerformed

    private void cmbEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEspecialidadActionPerformed
        String especialidadSeleccionada = (String) cmbEspecialidad.getSelectedItem();
        if (especialidadSeleccionada != null) {
            cargarMedicosPorEspecialidad(especialidadSeleccionada);
        }
    }//GEN-LAST:event_cmbEspecialidadActionPerformed

    private void jButton_AgendarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AgendarCitaActionPerformed
        // TODO add your handling code here:
        String cedula = txtCedulaPaciente.getText().trim();
        String nombre = txtNombrePaciente.getText().trim();
        String medico = (String) cmbMedico.getSelectedItem();
        String especialidad = (String) cmbEspecialidad.getSelectedItem();
        Date fechaSelec = dateChooser.getDate();

        // Validaciones básicas
        if (cedula.isEmpty() || nombre.isEmpty() || medico == null || especialidad == null || fechaSelec == null) {
            JOptionPane.showMessageDialog(this, "Por favor complete todos los campos: cédula, nombre, especialidad, médico y fecha.");
            return;
        }

        int selectedRow = tablaHorarios.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un horario.");
            return;
        }

        String hora = (String) tablaHorarios.getValueAt(selectedRow, 0);
        String estado = (String) tablaHorarios.getValueAt(selectedRow, 1);

        if (!"Libre".equals(estado)) {
            JOptionPane.showMessageDialog(this, "El horario ya está ocupado.");
            return;
        }

        // Confirmación previa al agendamiento
        SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
        String fechaEnString = formatoFecha.format(fechaSelec);
        int resAgendar = JOptionPane.showConfirmDialog(this,
                "¿Desea agendar esta cita?\n\n" +
                        "Cédula: " + cedula +
                        "\nNombre: " + nombre +
                        "\nEspecialidad: " + especialidad +
                        "\nMédico: " + medico +
                        "\nFecha: " + fechaEnString +
                        "\nHora: " + hora,
                "Confirmar Agendamiento",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.INFORMATION_MESSAGE);

        if (resAgendar == JOptionPane.OK_OPTION) {
            try {
                agendarCita(cedula);
                tablaHorarios.setValueAt("Ocupado", selectedRow, 1); // Actualizar tabla
                JOptionPane.showMessageDialog(this, "Cita agendada correctamente.");
            } catch (SQLException ex) {
                Logger.getLogger(AgendarCita.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error al agendar la cita:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton_AgendarCitaActionPerformed

    private void cmbMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMedicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMedicoActionPerformed

      
    private void cargarMedicosPorEspecialidad(String especialidad) {
        ConexionBD conexion = new ConexionBD();
        Connection conn = conexion.establecerConexion();

        try {
            String sql = "SELECT nombres FROM Doctor WHERE especialidad = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, especialidad);
            ResultSet rs = pstmt.executeQuery();

            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            while (rs.next()) {
            model.addElement(rs.getString("nombres"));
        }
            cmbMedico.setModel(model);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar médicos: " + ex.getMessage(), "Error de BD", JOptionPane.ERROR_MESSAGE);
            logger.log(Level.SEVERE, "Error al cargar médicos por especialidad", ex);
        } finally {
        conexion.cerrarConexion(conn);
        }
    }
    
    private void cargarEspecialidadesDisponibles() {
        ConexionBD conexion = new ConexionBD();
        Connection conn = conexion.establecerConexion();
        if (conn == null) {
            return;
        }

        try {
            String sql = "SELECT DISTINCT especialidad FROM Doctor";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();

            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            while (rs.next()) {
                model.addElement(rs.getString("especialidad"));
            }
            cmbEspecialidad.setModel(model);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar especialidades: " + ex.getMessage(), "Error de BD", JOptionPane.ERROR_MESSAGE);
            logger.log(Level.SEVERE, "Error al cargar especialidades", ex);
        } finally {
            conexion.cerrarConexion(conn);
        }
    }
    
    private String obtenerCedulaPorNombreMedico(String nombreMedico) {
        String cedula = null;
        ConexionBD conexion = new ConexionBD();
        Connection conn = conexion.establecerConexion();

        try {
            String sql = "SELECT cedula FROM Doctor WHERE nombres = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, nombreMedico);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                cedula = rs.getString("cedula");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al obtener cédula: " + ex.getMessage(), "Error de BD", JOptionPane.ERROR_MESSAGE);
            logger.log(Level.SEVERE, "Error al obtener cédula del médico", ex);
        } finally {
            conexion.cerrarConexion(conn);
        }

        return cedula;
    }

    private void buscarHorarios() {
        ConexionBD conexion = new ConexionBD();
        Connection conn = conexion.establecerConexion();

        String medico = (String) cmbMedico.getSelectedItem();
        String cedulaMedico = obtenerCedulaPorNombreMedico(medico);
        // id_doctor es nchar en la BD, no int
        String id_doctor = cedulaMedico;
        java.util.Date fecha = dateChooser.getDate();

        // Validaciones iniciales
        if (fecha == null || medico == null || medico.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Por favor seleccione un médico y una fecha válidos.", 
                "Error de Selección", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (id_doctor == null || id_doctor.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "No se encontró el ID del médico.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Limpiar tabla
        javax.swing.table.DefaultTableModel modeloTabla = 
            (javax.swing.table.DefaultTableModel) tablaHorarios.getModel();
        modeloTabla.setRowCount(0);

        // Horarios disponibles (todos inician como libres)
        String[] horas = {
            "08:00 AM", "09:00 AM", "10:00 AM", "11:00 AM", 
            "12:00 PM", "01:00 PM", "02:00 PM", "03:00 PM", "04:00 PM"
        };

        // Convertir fecha a formato SQL
        java.sql.Date sqlFecha = new java.sql.Date(fecha.getTime());

        // Consultar horarios ocupados desde la base de datos
        Set<String> horasOcupadas = new HashSet<>();
        String consulta = "SELECT hora FROM Cita WHERE id_doctor = ? AND fecha = ?";

        try (PreparedStatement stmt = conn.prepareStatement(consulta)) {
            stmt.setString(1, id_doctor); // Cambio a setString para nchar
            stmt.setDate(2, sqlFecha);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Time horaTime = rs.getTime("hora");
                if (horaTime != null) {
                    // Convertir TIME de BD (HH:mm:ss) a formato 12 horas (HH:mm AM/PM)
                    String horaFormato12 = convertirA12Horas(horaTime);
                    horasOcupadas.add(horaFormato12);
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "Error al consultar la base de datos: " + ex.getMessage(), 
                "Error SQL", 
                JOptionPane.ERROR_MESSAGE);
            return;
        } finally {
            // Cerrar conexión
            try {
                if (conn != null && !conn.isClosed()) {
                    conn.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        // Llenar tabla: Todos libres por defecto, ocupados solo si están en BD
        for (String hora : horas) {
            String estado = horasOcupadas.contains(hora) ? "Ocupado" : "Libre";
            modeloTabla.addRow(new Object[]{hora, estado});
        }

        // Mostrar scroll pane y actualizar vista
        if (jScrollPane2 != null) {
            jScrollPane2.setVisible(true);
        }

        revalidate();
        repaint();
    }

    
    /**
    * Convierte java.sql.Time a formato de 12 horas (HH:mm AM/PM)
    * Ejemplo: 09:00:00 -> 09:00 AM
    */
   private String convertirA12Horas(java.sql.Time time) {
       try {
           // Convertir Time a LocalTime
           java.time.LocalTime localTime = time.toLocalTime();

           // Formatear a 12 horas con AM/PM
           java.time.format.DateTimeFormatter formatter = 
               java.time.format.DateTimeFormatter.ofPattern("hh:mm a", java.util.Locale.ENGLISH);

           return localTime.format(formatter);
       } catch (Exception e) {
           e.printStackTrace();
           return null;
       }
    }
    
    public boolean validarCedula(String cedula) {
        // 1. Verifica longitud y solo números
        if (cedula == null || !cedula.matches("\\d{10}")) {
            return false;
        }

        // 2. Verifica provincia (01–24 o 30 para exterior)
        int provincia = Integer.parseInt(cedula.substring(0, 2));
        if (!((provincia >= 1 && provincia <= 24) || provincia == 30)) {
            return false;
        }

        // 3. Verifica el tercer dígito (debe ser < 6 para cédula natural)
        int tercerDigito = Character.getNumericValue(cedula.charAt(2));
        if (tercerDigito >= 6) {
            return false;
        }

        // 4. Aplica el algoritmo del módulo 10 para obtener el dígito verificador
        int suma = 0;
        for (int i = 0; i < 9; i++) {
            int num = Character.getNumericValue(cedula.charAt(i));
            // Los dígitos en posiciones impares (0,2,4...) se multiplican por 2
            if (i % 2 == 0) {
                num *= 2;
                if (num > 9) num -= 9;
            }
            suma += num;
        }

        // Calcula el dígito verificador
        int digitoVerificadorCalculado = (10 - (suma % 10)) % 10;

        // Obtiene el último dígito de la cédula
        int digitoVerificadorReal = Character.getNumericValue(cedula.charAt(9));

        // 5. Compara
        return digitoVerificadorCalculado == digitoVerificadorReal;
    }
    
    private void agendarCita(String cedula) throws SQLException{
        ConexionBD conexion = new ConexionBD();
        Connection conn = conexion.establecerConexion();
        int id_Cita = generarNuevoIdCita(conn);
        int id_paciente = Integer.parseInt(cedula);
        Date fechaSelec = dateChooser.getDate(); // java.util.Date
        Date fecha = new java.sql.Date(fechaSelec.getTime());
        String motivo= "";
        int id_tipo = 1;
        
        String nombreSeleccionado = (String) cmbMedico.getSelectedItem();
        String cedulaMedico = obtenerCedulaPorNombreMedico(nombreSeleccionado);
        int id_doctor = parseInt(cedulaMedico);
        
        int selectedRow = tablaHorarios.getSelectedRow();
        String hora = (String) tablaHorarios.getValueAt(selectedRow, 0);

        // Usamos un DateFormat para parsear el texto
        SimpleDateFormat formatoHora = new SimpleDateFormat("HH:mm");
        java.util.Date horaDate = null;
        try {
            horaDate = formatoHora.parse(hora);
        } catch (ParseException ex) {
            Logger.getLogger(AgendarCita.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Convertimos a java.sql.Time
        java.sql.Time horaSQL = new java.sql.Time(horaDate.getTime());

        
        if (conn == null) {
            return;
        }
        
        String sqlCita = "INSERT INTO CITA(id_cita, id_paciente, hora, "
                + "fecha, motivo, id_doctor, id_tipo) VALUES (?,?,?,?,?,?,?)";
        
        try (PreparedStatement pstmtCita = conn.prepareStatement(sqlCita)) {
            pstmtCita.setInt(1, id_Cita);
            pstmtCita.setInt(2, id_paciente);
            pstmtCita.setTime(3, horaSQL);
            pstmtCita.setDate(4, (java.sql.Date) fecha);
            pstmtCita.setString(5, motivo);
            pstmtCita.setInt(6, id_doctor);
            pstmtCita.setInt(7, id_tipo);
            
            if (pstmtCita.executeUpdate() == 0) {
                throw new SQLException("No se pudo insertar la cita");
            }
        }
    }
    
    private int generarNuevoIdCita(Connection conn) throws SQLException {
        String sql = "SELECT MAX(ID_CITA) FROM CITA";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            if (rs.next()) {
                return rs.getInt(1) + 1;
            }
            return 1; // Si no hay citas, empezar con 1
        }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgendarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgendarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgendarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgendarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgendarCita().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbEspecialidad;
    private javax.swing.JComboBox<String> cmbMedico;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JButton jButton_AgendarCita;
    private javax.swing.JButton jButton_BuscarHorarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tablaHorarios;
    private javax.swing.JTextField txtCedulaPaciente;
    private javax.swing.JTextField txtNombrePaciente;
    // End of variables declaration//GEN-END:variables
}
