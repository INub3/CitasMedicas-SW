package Vistas;

import conexion.ConexionBD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.toedter.calendar.JDateChooser;

/**
 *
 * @author Erick
 */
public class AgendarCita extends javax.swing.JFrame {

    /*private JComboBox<String> cmbEspecialidad;
    private JComboBox<String> cmbMedico;
    private JDateChooser dateChooser;
    private JTextField txtMotivoConsulta;
    private JComboBox<String> cmbEstadoCita;

    /**
     * Creates new form AgendarCita
     */
    private static final Logger logger = Logger.getLogger(DiagnosticoTratamiento.class.getName());

    public AgendarCita() {
        initComponents();
        cargarEspecialidadesDisponibles();
        dateChooser.setMinSelectableDate(new Date());
        ((JTextField) dateChooser.getDateEditor().getUiComponent()).setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        txtCedulaPaciente = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbEspecialidad = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jButton_BuscarHorarios = new javax.swing.JButton();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaHorarios = new javax.swing.JTable();
        jButton_AgendarCita = new javax.swing.JButton();
        cmbMedico = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtNombrePaciente = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agendamiento de citas Medicas");

        jLabel1.setText("Cédula del Paciente:");

        jLabel2.setText("Especialidad Médica:");

        cmbEspecialidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Especialidad", "Cardiología", "Dermatología", "Pediatría", "General" }));
        cmbEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEspecialidadActionPerformed(evt);
            }
        });

        jLabel3.setText("Médico:");

        jButton_BuscarHorarios.setText("Buscar Horarios");
        jButton_BuscarHorarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_BuscarHorariosActionPerformed(evt);
            }
        });

        jLabel4.setText("Fecha:");

        tablaHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Hora", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaHorarios.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaHorarios);

        jButton_AgendarCita.setText("Agendar Cita");
        jButton_AgendarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AgendarCitaActionPerformed(evt);
            }
        });

        cmbMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMedicoActionPerformed(evt);
            }
        });

        jLabel5.setText("Nombre del Paciente:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton_BuscarHorarios)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtCedulaPaciente)
                                    .addComponent(cmbEspecialidad, 0, 212, Short.MAX_VALUE)
                                    .addComponent(cmbMedico, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtNombrePaciente))))
                        .addGap(37, 37, 37))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(jButton_AgendarCita)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_BuscarHorarios)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_AgendarCita)
                .addGap(22, 22, 22))
        );

        jMenu1.setText("Agendar cita");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Diagnostico");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_BuscarHorariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_BuscarHorariosActionPerformed
        String cedula = txtCedulaPaciente.getText().trim();

        // Validar cédula
        if (!validarCedula(cedula)) {
            JOptionPane.showMessageDialog(this,
                    "❌ Cédula inválida. Debe tener 10 dígitos numéricos y ser ecuatoriana.",
                    "Cédula Inválida",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validar que haya seleccionado especialidad y médico
        if (cmbEspecialidad.getSelectedItem() == null || cmbMedico.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this,
                    "Por favor seleccione una especialidad y un médico.",
                    "Campos Requeridos",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (dateChooser.getDate() == null) {
            JOptionPane.showMessageDialog(this,
                    "Por favor seleccione una fecha.",
                    "Fecha Requerida",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Todo está correcto, proceder a buscar horarios
        JOptionPane.showMessageDialog(this, "✅ Cédula válida. Buscando horarios disponibles...", "Validación Exitosa", JOptionPane.INFORMATION_MESSAGE);
        buscarHorarios();
    }//GEN-LAST:event_jButton_BuscarHorariosActionPerformed

    private void cmbEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEspecialidadActionPerformed
        String especialidadSeleccionada = (String) cmbEspecialidad.getSelectedItem();
        if (especialidadSeleccionada != null) {
            cargarMedicosPorEspecialidad(especialidadSeleccionada);
        }
    }//GEN-LAST:event_cmbEspecialidadActionPerformed

    private void jButton_AgendarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AgendarCitaActionPerformed
        // Obtener datos de la interfaz
        String cedula = txtCedulaPaciente.getText().trim();
        String nombre = txtNombrePaciente.getText().trim();
        String medico = (String) cmbMedico.getSelectedItem();
        String especialidad = (String) cmbEspecialidad.getSelectedItem();
        Date fechaSelec = dateChooser.getDate();

        // Validaciones básicas
        if (cedula.isEmpty() || nombre.isEmpty() || fechaSelec == null || medico == null || especialidad == null) {
            JOptionPane.showMessageDialog(this, "Por favor complete todos los campos requeridos.", "Campos Incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validar que se haya seleccionado un horario
        int selectedRow = tablaHorarios.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un horario de la tabla.", "Horario no seleccionado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String hora = (String) tablaHorarios.getValueAt(selectedRow, 0);
        String estado = (String) tablaHorarios.getValueAt(selectedRow, 1);

        if (!"Libre".equals(estado)) {
            JOptionPane.showMessageDialog(this, "El horario seleccionado ya está ocupado.", "Horario Ocupado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Formatear fecha para la base de datos
        SimpleDateFormat formatoFechaBD = new SimpleDateFormat("yyyy-MM-dd");
        String fechaBD = formatoFechaBD.format(fechaSelec);

        // Formatear fecha para mostrar al usuario
        SimpleDateFormat formatoFechaUsuario = new SimpleDateFormat("dd/MM/yyyy");
        String fechaUsuario = formatoFechaUsuario.format(fechaSelec);

        // Mostrar confirmación
        int confirmacion = JOptionPane.showConfirmDialog(this,
                "¿Confirmar agendamiento de cita?\n\n"
                + "Paciente: " + nombre + "\n"
                + "Cédula: " + cedula + "\n"
                + "Especialidad: " + especialidad + "\n"
                + "Médico: " + medico + "\n"
                + "Fecha: " + fechaUsuario + "\n"
                + "Hora: " + hora,
                "Confirmar Agendamiento",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        if (confirmacion != JOptionPane.YES_OPTION) {
            return;
        }

        // Proceder con el guardado en la base de datos
        ConexionBD conexion = new ConexionBD();
        Connection conn = conexion.establecerConexion();

        if (conn == null) {
            JOptionPane.showMessageDialog(this, "Error: No se pudo conectar a la base de datos.", "Error de Conexión", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // 1. Obtener el próximo ID para la cita
            String sqlMaxId = "SELECT ISNULL(MAX(id_cita), 0) + 1 AS siguiente_id FROM [" + conexion.getLinkedServerName() + "].[polisalud].[dbo].[Cita]";
            PreparedStatement pstmtMaxId = conn.prepareStatement(sqlMaxId);
            ResultSet rsMaxId = pstmtMaxId.executeQuery();

            int siguienteIdCita = 1;
            if (rsMaxId.next()) {
                siguienteIdCita = rsMaxId.getInt("siguiente_id");
            }
            rsMaxId.close();
            pstmtMaxId.close();

            // 2. Usar la cédula del médico directamente (1726357211 según tu BD)
            String cedulaDoctor = "1726357211";  // Cédula de Boris Gabriel Garcés Proaño

            // 3. Insertar la nueva cita
            String sqlInsert = "INSERT INTO [" + conexion.getLinkedServerName() + "].[polisalud].[dbo].[Cita] "
                    + "(id_cita, id_paciente, hora, fecha, motivo, id_doctor, id_tipo, id_anamnesis, id_enfermero, "
                    + "estatura, tiempo_enfermedad, presion_sistolica, presion_diastolica, peso, frecuencia_cardiaca, diagnostico) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            PreparedStatement pstmtInsert = conn.prepareStatement(sqlInsert);

            // Configurar parámetros
            pstmtInsert.setInt(1, siguienteIdCita);           // id_cita (auto-generado)
            pstmtInsert.setString(2, cedula);                 // id_paciente (cédula del paciente)
            pstmtInsert.setString(3, hora);                   // hora
            pstmtInsert.setString(4, fechaBD);                // fecha (formato yyyy-MM-dd)
            pstmtInsert.setString(5, "Consulta general");     // motivo (valor por defecto)
            pstmtInsert.setString(6, cedulaDoctor);           // id_doctor (cédula del médico)
            pstmtInsert.setInt(7, 1);                         // id_tipo (1 por defecto)
            pstmtInsert.setInt(8, 1);
            pstmtInsert.setString(9, cedula);                 // id_enfermero (usar cédula)

            // Campos con valores NULL por defecto (se llenarán en el diagnóstico)
            pstmtInsert.setObject(10, null);                  // estatura
            pstmtInsert.setObject(11, null);                  // tiempo_enfermedad
            pstmtInsert.setObject(12, null);                  // presion_sistolica
            pstmtInsert.setObject(13, null);                  // presion_diastolica
            pstmtInsert.setObject(14, null);                  // peso
            pstmtInsert.setObject(15, null);                  // frecuencia_cardiaca
            pstmtInsert.setObject(16, null);                  // diagnostico

            int filasAfectadas = pstmtInsert.executeUpdate();
            pstmtInsert.close();

            if (filasAfectadas > 0) {
                // Actualizar la tabla visual
                tablaHorarios.setValueAt("Ocupado", selectedRow, 1);

                JOptionPane.showMessageDialog(this,
                        "✅ Cita agendada exitosamente\n\n"
                        + "ID de Cita: " + siguienteIdCita + "\n"
                        + "Paciente: " + nombre + "\n"
                        + "Fecha: " + fechaUsuario + "\n"
                        + "Hora: " + hora + "\n"
                        + "Médico: " + medico,
                        "Cita Agendada",
                        JOptionPane.INFORMATION_MESSAGE);

                // Limpiar formulario
                txtCedulaPaciente.setText("");
                txtNombrePaciente.setText("");
                dateChooser.setDate(null);
                cmbEspecialidad.setSelectedIndex(0);
                cmbMedico.setSelectedIndex(0);

                // Limpiar tabla de horarios
                javax.swing.table.DefaultTableModel modeloTabla = (javax.swing.table.DefaultTableModel) tablaHorarios.getModel();
                modeloTabla.setRowCount(0);

            } else {
                JOptionPane.showMessageDialog(this, "Error: No se pudo guardar la cita.", "Error al Guardar", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error en la base de datos:\n" + ex.getMessage(),
                    "Error de BD",
                    JOptionPane.ERROR_MESSAGE);
            logger.log(Level.SEVERE, "Error al guardar cita", ex);
        } finally {
            conexion.cerrarConexion(conn);
        }

    }//GEN-LAST:event_jButton_AgendarCitaActionPerformed

    private void cmbMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMedicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMedicoActionPerformed

//    private void cargarMedicos() {
//        String especialidad = (String) cmbEspecialidad.getSelectedItem();
//        cmbMedico.removeAllItems();
//
//        switch (especialidad) {
//            case "Cardiología":
//                cmbMedico.addItem("Dr. Carlos Pérez");
//                cmbMedico.addItem("Dra. Ana Martínez");
//                break;
//            case "Dermatología":
//                cmbMedico.addItem("Dra. Laura Gómez");
//                break;
//            case "Pediatría":
//                cmbMedico.addItem("Dr. Luis Fernández");
//                cmbMedico.addItem("Dra. María López");
//                break;
//            case "General":
//                cmbMedico.addItem("Dr. José Ramírez");
//                break;
//        }
//    }
//    
    private void cargarMedicosPorEspecialidad(String especialidad) {
        // Versión que siempre muestra el médico real de tu base de datos
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        // Cargar el médico real: Boris Gabriel Garcés Proaño
        model.addElement("Boris Gabriel Garcés Proaño");

        // Si quieres agregar más médicos según especialidad, puedes hacerlo aquí
        switch (especialidad) {
            case "MedicinaGeneral":
                model.addElement("Boris Gabriel Garcés Proaño");
                break;
            case "Cardiología":
                model.addElement("Boris Gabriel Garcés Proaño");
                break;
            case "Pediatría":
                model.addElement("Boris Gabriel Garcés Proaño");
                break;
            case "Dermatología":
                model.addElement("Boris Gabriel Garcés Proaño");
                break;
            default:
                model.addElement("Boris Gabriel Garcés Proaño");
                break;
        }

        cmbMedico.setModel(model);

        // Seleccionar el primer médico automáticamente
        if (model.getSize() > 0) {
            cmbMedico.setSelectedIndex(0);
        }
    }

    private void cargarEspecialidadesDisponibles() {
        // Solución simplificada que siempre funciona
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        // Agregar especialidades disponibles
        model.addElement("MedicinaGeneral");
        model.addElement("Cardiología");
        model.addElement("Pediatría");
        model.addElement("Dermatología");

        cmbEspecialidad.setModel(model);

        // Seleccionar la primera especialidad automáticamente
        if (model.getSize() > 0) {
            cmbEspecialidad.setSelectedIndex(0);
        }
    }

    private void buscarHorarios() {
        String medico = (String) cmbMedico.getSelectedItem();
        java.util.Date fecha = dateChooser.getDate();

        // Validaciones iniciales
        if (fecha == null || medico == null || medico.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un médico y una fecha válidos.", "Error de Selección", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtener el modelo de la tabla
        javax.swing.table.DefaultTableModel modeloTabla = (javax.swing.table.DefaultTableModel) tablaHorarios.getModel();
        modeloTabla.setRowCount(0); // Limpiar tabla

        // Generar horarios disponibles (formato 24 horas)
        String[] horas = {
            "08:00", "09:00", "10:00", "11:00",
            "12:00", "13:00", "14:00", "15:00", "16:00", "17:00"
        };

        // Añadir todos los horarios como "Libre" 
        for (String hora : horas) {
            Object[] fila = {hora, "Libre"};
            modeloTabla.addRow(fila);
        }

        // Mostrar mensaje informativo
        JOptionPane.showMessageDialog(this,
                "Horarios cargados para:\n"
                + "Médico: " + medico + "\n"
                + "Fecha: " + new SimpleDateFormat("dd/MM/yyyy").format(fecha) + "\n\n"
                + "Todos los horarios están disponibles",
                "Horarios Disponibles",
                JOptionPane.INFORMATION_MESSAGE);

        // Asegurar visibilidad de la tabla
        if (jScrollPane2 != null) {
            jScrollPane2.setVisible(true);
        }
        revalidate();
        repaint();
    }

    public boolean validarCedula(String cedula) {
        // 1. Verifica longitud y solo números
        if (cedula == null || !cedula.matches("\\d{10}")) {
            return false;
        }

        // 2. Verifica provincia (01–24 o 30 para exterior)
        int provincia = Integer.parseInt(cedula.substring(0, 2));
        if (!((provincia >= 1 && provincia <= 24) || provincia == 30)) {
            return false;
        }

        // 3. Verifica el tercer dígito (debe ser < 6 para cédula natural)
        int tercerDigito = Character.getNumericValue(cedula.charAt(2));
        if (tercerDigito >= 6) {
            return false;
        }

        // 4. Aplica el algoritmo del módulo 10 para obtener el dígito verificador
        int suma = 0;
        for (int i = 0; i < 9; i++) {
            int num = Character.getNumericValue(cedula.charAt(i));
            // Los dígitos en posiciones impares (0,2,4...) se multiplican por 2
            if (i % 2 == 0) {
                num *= 2;
                if (num > 9) {
                    num -= 9;
                }
            }
            suma += num;
        }

        // Calcula el dígito verificador
        int digitoVerificadorCalculado = (10 - (suma % 10)) % 10;

        // Obtiene el último dígito de la cédula
        int digitoVerificadorReal = Character.getNumericValue(cedula.charAt(9));

        // 5. Compara
        return digitoVerificadorCalculado == digitoVerificadorReal;
    }

    private boolean validarPacienteExiste(String cedula) {
        ConexionBD conexion = new ConexionBD();
        Connection conn = conexion.establecerConexion();

        if (conn == null) {
            return false;
        }

        try {
            String sql = "SELECT id_paciente FROM [" + conexion.getLinkedServerName() + "].[polisalud].[dbo].[Paciente] WHERE id_paciente = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, cedula);
            ResultSet rs = pstmt.executeQuery();

            boolean existe = rs.next();

            rs.close();
            pstmt.close();

            return existe;

        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Error al validar paciente", ex);
            return false;
        } finally {
            conexion.cerrarConexion(conn);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgendarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgendarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgendarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgendarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgendarCita().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbEspecialidad;
    private javax.swing.JComboBox<String> cmbMedico;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JButton jButton_AgendarCita;
    private javax.swing.JButton jButton_BuscarHorarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tablaHorarios;
    private javax.swing.JTextField txtCedulaPaciente;
    private javax.swing.JTextField txtNombrePaciente;
    // End of variables declaration//GEN-END:variables
}
